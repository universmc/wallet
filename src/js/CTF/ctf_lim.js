const fs = require("fs");
const Groq = require("groq-sdk");
const groq = new Groq();

const TOTAL_DURATION = 6 * 60 * 60 * 1000; // Limite de 6 heures pour le CTF
const SESSION_TIME = 30 * 60 * 1000; // 30 minutes pour chaque session de travail
const SHORT_BREAK_TIME = 5 * 60 * 1000; // 5 minutes de pause courte
const LONG_BREAK_TIME = 15 * 60 * 1000; // 15 minutes de pause longue
let ctfSessionCount = 0; // Compteur pour les sessions
let timeSpent = 0; // Temps total pass√©

// Contenu de la chronique (base des t√¢ches)
const chronique = {
  title: "La D√©mocratie en Danger : Manifeste pour la Transparence et l'Int√©grit√©",
  description: "Ce manifeste vise √† sensibiliser et mobiliser les citoyens contre la fraude √©lectorale, l'escroquerie financi√®re en bande organis√©e, et la d√©sinformation orchestr√©e.",
  sections: [
    {
      title: "Fraude √©lectorale : Une atteinte √† la volont√© du peuple",
      tasks: [
        {
          description: "Recueillir des preuves de fraude √©lectorale et documenter les cas de manipulation des bulletins et de corruption.",
          action: "Exigeons des audits et des contr√¥les ind√©pendants pour garantir des √©lections transparentes.",
          legalReferences: ["Code √©lectoral L52, L53"]
        }
      ]
    },
    {
      title: "Escroquerie financi√®re en bande organis√©e",
      tasks: [
        {
          description: "Collecter des donn√©es sur les r√©seaux d‚Äôinfluence financiers et les m√©canismes de corruption impliqu√©s.",
          action: "Demandons la transparence et une l√©gislation stricte contre l'escroquerie financi√®re en bande organis√©e.",
          legalReferences: ["Code p√©nal 313, 314, 340, 342"]
        }
      ]
    },
    {
      title: "D√©sinformation et propagande des milliardaires",
      tasks: [
        {
          description: "√âtudier les campagnes de d√©sinformation men√©es via les r√©seaux sociaux et les m√©dias contr√¥l√©s.",
          action: "R√©clamons la libert√© et la diversit√© dans les m√©dias pour garantir une information √©quilibr√©e.",
          legalReferences: ["Code p√©nal 431, 226"]
        }
      ]
    }
  ],
  conclusion: {
    content: "Il est imp√©ratif de se mobiliser pour garantir l'int√©grit√© d√©mocratique. Exigeons des r√©formes contre la manipulation √©lectorale et financi√®re.",
    action: "Ensemble, exigeons des r√©formes qui prot√®gent nos droits et pr√©servent l'int√©grit√© de notre d√©mocratie."
  }
};

// Fonction pour g√©n√©rer la documentation √† chaque √©tape
function generateDocumentation(task, section) {
  const content = `
# Documentation pour ${section.title}

## T√¢che
${task.description}

## Appel √† l'action
${task.action}

## R√©f√©rences l√©gales
${task.legalReferences.join(", ")}

## D√©tails suppl√©mentaires
- Date de g√©n√©ration : ${new Date().toLocaleString()}
`;

  const outputFilePath = `CTF_${section.title.replace(/ /g, "_")}_${new Date().toISOString().replace(/[-:TZ]/g, "")}.md`;
  fs.writeFileSync(outputFilePath, content);
  console.log(`Documentation g√©n√©r√©e pour ${section.title} et sauvegard√©e dans ${outputFilePath}`);
}

// Fonction principale pour g√©rer le d√©roulement du CTF
async function main() {
  for (const section of chronique.sections) {
    for (const task of section.tasks) {
      if (timeSpent >= TOTAL_DURATION) {
        console.log("Dur√©e maximale de 6 heures atteinte. Fin de la session CTF.");
        return;
      }

      console.log(`üîß D√©but de la t√¢che : ${task.description}`);
      generateDocumentation(task, section);

      const chatCompletion = await groq.chat.completions.create({
        messages: [
          { role: "system", content: "D√©velopper une analyse en fonction des preuves collect√©es pour le CTF." },
          { role: "user", content: `Analyse et recommandations pour ${section.title} : ${task.description}` }
        ],
        model: "mixtral-8x7b-32768",
        temperature: 0.6,
        max_tokens: 2048,
        top_p: 1,
        stream: false
      });

      const mdContent = chatCompletion.choices[0]?.message?.content;
      const outputFilePath = "CTF_Report_" + new Date().toISOString().replace(/[-:TZ]/g, "") + ".md";
      fs.writeFileSync(outputFilePath, mdContent);
      console.log(`Rapport g√©n√©r√© pour ${section.title} et enregistr√© dans ${outputFilePath}`);

      // D√©marrer les sessions pour la t√¢che
      startCTF(SESSION_TIME);
      if (timeSpent >= TOTAL_DURATION) return;
    }
  }
  console.log(`üìå Conclusion : ${chronique.conclusion.content}`);
}

// Fonction pour g√©rer les sessions de CTF dans le cadre de 6 heures
function startCTF(sessionTime) {
  console.log("‚è≥ D√©but d'une session de travail de 30 minutes.");
  timeSpent += sessionTime;

  // Gestion des pauses
  if (timeSpent >= TOTAL_DURATION) return;
  if (ctfSessionCount % 4 === 0 && ctfSessionCount > 0) {
    console.log("üí° Prendre une pause longue de 15 minutes.");
    timeSpent += LONG_BREAK_TIME;
  } else {
    console.log("‚è∏Ô∏è Pause courte de 5 minutes.");
    timeSpent += SHORT_BREAK_TIME;
  }

  ctfSessionCount++;
}

// Ex√©cution de la fonction principale
main().catch(console.error);
